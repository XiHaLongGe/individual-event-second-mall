<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nf.dao.port.CustomerLoginDao">
    <sql id="selectParams">
        login_id,
        head_icon_url,
        login_name,
        login_account,
        login_password,
        activate_code,
        account_stats,
        webmaster
    </sql>
    <sql id="registerParams">
        login_name,
        head_icon_url,
        login_account,
        login_password,
        activate_code
    </sql>
    <!--获取到所有用户登录信息列表,并以分页的格式呈现-->
    <select id="getPageAll" resultType="com.nf.entity.CustomerLoginEntity">
        select <include refid="selectParams"/>
        from customer_login
        order by login_id
    </select>
    <!--根据用户昵称、账号状态、用户身份进行条件查询-->
    <select id="getPageByCondition" resultType="com.nf.entity.CustomerLoginEntity">
        select <include refid="selectParams"/>
        from customer_login
        where 1 = 1
            <choose>
                <when test="customerLoginEntity.loginName != '' ">
                    and login_name like '%' #{customerLoginEntity.loginName} '%'
                </when>
            </choose>
            <choose>
                <when test="customerLoginEntity.accountStats != null">
                    and account_stats = #{customerLoginEntity.accountStats}
                </when>
            </choose>
            <choose>
                <when test="customerLoginEntity.webmaster != null">
                    and webmaster = #{customerLoginEntity.webmaster}
                </when>
            </choose>
        order by login_id
    </select>
    <!--根据用户登录ID来获取用户登录表的相关信息-->
    <select id="getByLoginId" resultType="com.nf.entity.CustomerLoginEntity">
        select <include refid="selectParams"/>
        from customer_login
        where login_id = #{loginId}
    </select>
    <!--根据用户帐号来获取用户登录表的相关信息-->
    <select id="getByLoginAccount" resultType="com.nf.entity.CustomerLoginEntity">
        select <include refid="selectParams"/>
        from customer_login
        where login_account = #{loginAccount}
    </select>
    <!--验证用户登录时输入的账号密码是否正确-->
    <select id="verifyLogin" resultType="boolean">
        select count(*) from customer_login
        where
            login_account = #{customerLoginEntity.loginAccount}
        and
            login_password = #{customerLoginEntity.loginPassword}
    </select>
    <!--验证用户更改密码时原密码是否输入正确-->
    <select id="equalsPassword" resultType="boolean">
        select count(*) from customer_login
        where
            login_password = #{frontPassword}
        and
            login_id = #{loginId}
    </select>
    <!--更新用户密码-->
    <update id="updatePassword">
        update customer_login
        set login_password = #{password}
        where login_id = #{loginId}
    </update>
    <!--
        useGenerateKeys这个属性，意思就是使用自增。我们需要将这个字段设置为 true 。
        使用 keyProperty=""来指定bean中的哪一个属性是这个自增字段。
        因为在CustomerLoginDao接口中的insertCustomer方法中的参数使用了@Param注解，所以keyProperty需要指定为 customerLoginEntity.loginId。

        数据插入成功后，id值被反填到CustomerLoginEntity对象中，调用getLoginId()就可以获取。
    -->
    <!--新用户用户注册-->
    <insert id="registerCustomer" useGeneratedKeys="true" keyProperty="customerLoginEntity.loginId">
        insert into customer_login(<include refid="registerParams"/>) values
        (
            #{customerLoginEntity.loginName},
            '\\static\\background\\upload-file\\headIconImage\\001.png',
            #{customerLoginEntity.loginAccount},
            #{customerLoginEntity.loginPassword},
            #{customerLoginEntity.activateCode}
        );
    </insert>
    <!--重置用户密码  六个一 -->
    <update id="resetPassword">
        update customer_login
        set login_password = #{customerLoginEntity.loginPassword}
        where login_id = #{customerLoginEntity.loginId}
    </update>
    <!--修改用户帐号状态-->
    <update id="updateAccountStats">
        update customer_login
        set account_stats = #{customerLoginEntity.accountStats}
        where
        <choose>
            <when test="customerLoginEntity.loginId != null">
                login_id = #{customerLoginEntity.loginId}
            </when>
            <otherwise>
                activate_code = #{customerLoginEntity.activateCode}
            </otherwise>
        </choose>
    </update>
    <!--修改用户头像路径和昵称-->
    <update id="updatePersonal">
        update customer_login
        set head_icon_url = #{customerLoginEntity.headIconUrl},
            login_name = #{customerLoginEntity.loginName}
        where login_id = #{customerLoginEntity.loginId}
    </update>
    <!--删除用户-->
    <delete id="deleteCustomer">
        delete from customer_login where login_id = #{customerLoginEntity.loginId}
    </delete>
    <!--批量删除用户-->
    <delete id="batchDeleteCustomer">
        delete from customer_login
        where 1 = 1
        and login_id in
        <foreach collection="loginIdArray" item="loginIdArray" open="(" separator="," close=")">
            #{loginIdArray}
        </foreach>
    </delete>
</mapper>