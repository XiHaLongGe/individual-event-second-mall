<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nf.dao.port.ProductInfDao">
    <sql id="insertParams">
        brand_inf_id,
        product_category_id,
        product_inf_name,
        product_inf_describe,
        product_inf_price,
        product_inf_sales,
        product_inf_stockpile,
        product_inf_carousel
    </sql>
    <sql id="allParams">
        product_inf_id,
        brand_inf_id,
        product_inf_name,
        product_inf_describe,
        product_inf_price,
        product_inf_sales,
        product_inf_stockpile,
        product_inf_carousel
    </sql>
    <sql id="joinParams">
        pi.product_inf_id,
        pi.brand_inf_id,
        pi.product_category_id,
        pi.product_inf_name,
        pi.product_inf_describe,
        pi.product_inf_price,
        pi.product_inf_sales,
        pi.product_inf_stockpile,
        pi.product_inf_carousel,
        bi.brand_inf_name as brandInfName,
        pc.product_category_name as productCategoryName
    </sql>

    <sql id="joinPictureParams">
        pi.product_inf_id,
        pi.brand_inf_id,
        pi.product_category_id,
        pi.product_inf_name,
        pi.product_inf_describe,
        pi.product_inf_price,
        pi.product_inf_sales,
        pi.product_inf_stockpile,
        pi.product_inf_carousel,
        pi2.picture_inf_url as pictureInfUrl
    </sql>

    <resultMap id="productInfResultMap" type="com.nf.entity.ProductInfEntity">
        <result column="brandInfName" property="brandInfName"/>
        <result column="productCategoryName" property="productCategoryName"/>
        <result column="pictureInfUrl" property="pictureInfUrl"/>
    </resultMap>

    <!--获取分页后的数据（可根据条件进行检索）-->
    <select id="getPageByCondition" resultMap="productInfResultMap">
        select <include refid="joinParams"/>
        from product_inf pi left join brand_inf bi
            on pi.brand_inf_id = bi.brand_inf_id
        left join product_category pc
            on pi.product_category_id = pc.product_category_id
        where 1=1
        <choose>
            <when test='productInfEntity.productInfName != null and productInfEntity.productInfName != ""'>
                and pi.product_inf_name like '%' #{productInfEntity.productInfName} '%'
            </when>
        </choose>
        <choose>
            <when test="productInfEntity.brandInfId != null and productInfEntity.brandInfId > 0">
                and pi.brand_inf_id = #{productInfEntity.brandInfId}
            </when>
        </choose>
        <choose>
            <when test='productInfEntity.productCategoryId != null and productInfEntity.productCategoryId != ""'>
                and pi.product_category_id
                in (select product_category_id from product_category where product_category_id = #{productInfEntity.productCategoryId} or parent_id = #{productInfEntity.productCategoryId})
            </when>
        </choose>
        order by pi.product_inf_id
    </select>

    <!--获取设为轮播展示的商品id-->
    <select id="getCarouselProductInfId" resultType="integer">
        select product_inf_id
        from product_inf
        where product_inf_carousel = 1
    </select>

    <!--获取到商品信息表中所有的品牌信息id-->
    <select id="getAllBrandInfId" resultType="integer">
        select brand_inf_id
        from product_inf
        group by brand_inf_id
    </select>

    <!--根据栏目id获取到相应数据-->
    <select id="getByColumn" resultMap="productInfResultMap">
        select <include refid="joinPictureParams"/>
        from product_inf pi join picture_inf pi2
        on pi.product_inf_id = pi2.product_inf_id
        where pi.product_category_id = #{categoryId} and pi2.picture_inf_master = 1
    </select>

    <!--根据栏目id获取到相应数据-->
    <select id="getByProductName" resultMap="productInfResultMap">
        select <include refid="joinPictureParams"/>
        from product_inf pi join picture_inf pi2
        on pi.product_inf_id = pi2.product_inf_id
        where 1=1
        <choose>
            <when test='productInfEntity.productCategoryName != null and productInfEntity.productCategoryName != ""'>
                and pi.product_category_id = #{productInfEntity.productCategoryName}
            </when>
        </choose>
        <choose>
            <when test="productInfEntity.brandInfId != null and productInfEntity.brandInfId != 0">
                and pi.brand_inf_id = #{productInfEntity.brandInfId}
            </when>
        </choose>
        <choose>
            <when test="productInfEntity.beginPrice != null and productInfEntity.endPrice != null and productInfEntity.beginPrice != 0 or productInfEntity.endPrice != 0">
                <choose>
                    <when test="productInfEntity.beginPrice != 0 and productInfEntity.endPrice == 0">
                        and pi.product_inf_price > #{productInfEntity.beginPrice}
                    </when>
                    <otherwise>
                        and pi.product_inf_price BETWEEN #{productInfEntity.beginPrice} AND #{productInfEntity.endPrice}
                    </otherwise>
                </choose>
            </when>
        </choose>
         and pi.product_inf_name like '%' #{productInfEntity.productInfName} '%'
         and pi2.picture_inf_master = 1
    </select>

    <!--根据商品id获取商品信息-->
    <select id="getByProductInfId" resultMap="productInfResultMap">
        select <include refid="joinParams"/>
        from product_inf pi left join brand_inf bi
        on pi.brand_inf_id = bi.brand_inf_id
        left join product_category pc
        on pi.product_category_id = pc.product_category_id
        where pi.product_inf_id = #{productInfId}
    </select>

    <!--添加商品信息-->
    <insert id="insertProductInf">
        insert into product_inf(<include refid="insertParams"/>) values
        (
            #{productInfEntity.brandInfId},
            #{productInfEntity.productCategoryId},
            #{productInfEntity.productInfName},
            #{productInfEntity.productInfDescribe},
            #{productInfEntity.productInfPrice},
            0,
            #{productInfEntity.productInfStockpile},
            #{productInfEntity.productInfCarousel}
        )
    </insert>

    <!--修改商品信息-->
    <update id="updateProductInf">
        update product_inf set
        brand_inf_id = #{productInfEntity.brandInfId},
        product_category_id = #{productInfEntity.productCategoryId},
        product_inf_name = #{productInfEntity.productInfName},
        product_inf_describe = #{productInfEntity.productInfDescribe},
        product_inf_price = #{productInfEntity.productInfPrice},
        product_inf_stockpile = #{productInfEntity.productInfStockpile},
        product_inf_carousel = #{productInfEntity.productInfCarousel}
        where product_inf_id = #{productInfEntity.productInfId}
    </update>


    <!--修改商品的轮播展示状态-->
    <update id="updateCarousel">
        update product_inf set
        product_inf_carousel = #{productInfEntity.productInfCarousel}
        where product_inf_id = #{productInfEntity.productInfId}
    </update>



    <!--批量删除商品信息-->
    <delete id="batchDeleteBrandInf">
        delete from product_inf
        where product_inf_id in
        <foreach collection="productInfIdArray" item="productInfIdArray" open="(" separator="," close=")">
            #{productInfIdArray}
        </foreach>
    </delete>
</mapper>