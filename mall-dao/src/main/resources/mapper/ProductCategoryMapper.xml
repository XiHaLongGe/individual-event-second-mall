<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nf.dao.port.ProductCategoryDao">
    <sql id="allParams">
        product_category_id,
        product_category_name,
        sidebar_category_describe,
        product_category_level,
        parent_id
    </sql>
    <sql id="selfJoinParams">
        p1.product_category_id,
        p1.product_category_name,
        p1.sidebar_category_describe,
        p1.product_category_level,
        p1.parent_id,
        p2.product_category_name as parentCategoryName
    </sql>
    <resultMap id="productCategoryResultMap" type="com.nf.entity.ProductCategoryEntity">
        <result property="parentCategoryName" column="parentCategoryName"/>
    </resultMap>
    <!--根据查询条件来获取到商品类型信息-->
    <select id="getPageByCondition" resultMap="productCategoryResultMap">
        select <include refid="selfJoinParams"/>
        from product_category p1 left join product_category p2
        on p2.product_category_id = p1.parent_id
        where 1 = 1
        <choose>
            <when test="productCategoryEntity.productCategoryLevel != null and productCategoryEntity.productCategoryLevel != ''">
                and p1.product_category_level = #{productCategoryEntity.productCategoryLevel}
            </when>
        </choose>
        <choose>
            <when test="productCategoryEntity.productCategoryName != null and productCategoryEntity.productCategoryName != ''">
                and p1.product_category_name like '%' #{productCategoryEntity.productCategoryName} '%'
            </when>
        </choose>
        order by p1.product_category_id
    </select>

    <select id="getByProductCategoryId" resultType="com.nf.entity.ProductCategoryEntity">
        select <include refid="allParams"/>
        from product_category
        where 1 = 1
        and product_category_id = #{productCategoryId}
    </select>

    <!--根据商品类型层级来获取到商品类型信息-->
    <select id="getByProductCategoryLevel" resultType="com.nf.entity.ProductCategoryEntity">
        select <include refid="allParams"/>
        from product_category
        where 1 = 1
        and product_category_level = #{productCategoryLevel}
    </select>

    <!--获得父类型id的子类型id-->
    <select id="getByParentId" resultType="string">
        select product_category_id
        from product_category
        where parent_id in
        <foreach collection="parentIdArray" item="parentIdArray" open="(" separator="," close=")">
            #{parentIdArray}
        </foreach>
    </select>

    <!--通过添加数据的类型层级和父类id来获得该层级最大id-->
    <select id="getBigId" resultType="com.nf.entity.ProductCategoryEntity">
        select <include refid="allParams"/>
        from product_category
        where product_category_level = #{productCategoryEntity.productCategoryLevel}
        <choose>
            <when test="productCategoryEntity.parentId != null and productCategoryEntity.parentId != ''">
                and parent_id = #{productCategoryEntity.parentId}
            </when>
        </choose>
        ORDER BY product_category_id desc
        LIMIT 1
    </select>

    <!---->
    <select id="getByPbrIdCount" resultType="integer">
        select count(*)
        from product_category
        where  1 = 1
        and parent_id in
        <foreach collection="parentIdArray" item="parentId" open="(" separator="," close=")">
            #{parentId}
        </foreach>
    </select>

    <!--添加商品类型数据-->
    <insert id="insertProductCategory">
        insert into product_category(<include refid="allParams"/>) values
        (
            #{productCategoryEntity.productCategoryId},
            #{productCategoryEntity.productCategoryName},
            #{productCategoryEntity.sidebarCategoryDescribe},
            #{productCategoryEntity.productCategoryLevel},
            #{productCategoryEntity.parentId}
        )
    </insert>

    <!--修改商品类型数据-->
    <update id="updateProductCategory">
        update product_category
        set
            product_category_name = #{productCategoryEntity.productCategoryName},
            sidebar_category_describe = #{productCategoryEntity.sidebarCategoryDescribe},
            product_category_level = #{productCategoryEntity.productCategoryLevel},
            parent_id = #{productCategoryEntity.parentId}
        where product_category_id = #{productCategoryEntity.productCategoryId}
    </update>

    <!--根据父id对商品类型进行删除-->
    <delete id="deleteByParentId">
        delete from product_category
        where 1 = 1
        and parent_id in
        <foreach collection="parentIdArray" item="parentId" open="(" separator="," close=")">
            #{parentId}
        </foreach>
    </delete>

    <!--批量删除商品类型-->
    <delete id="batchDeleteProductCategory">
        delete from product_category
        where 1 = 1
        and product_category_id in
        <foreach collection="productCategoryIdArray" item="productCategoryId" open="(" separator="," close=")">
            #{productCategoryId}
        </foreach>
    </delete>
</mapper>